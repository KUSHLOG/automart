generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  phone     String?  // Contact phone number
  address   String?  // Contact address
  nic       String?  // National Identity Card number
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicles  Vehicle[]
  bids      Bid[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  conversations    Conversation[]
}

model Vehicle {
  id          String   @id @default(cuid())
  make        String   // Brand (BMW, Toyota, etc.)
  model       String   // Model name
  year        Int      // Year of manufacture
  price       Int      // cents or LKR whole number. Here treat as integer LKR.
  mileage     Int      // in km
  fuelType    String   @default("Petrol") // Petrol, Diesel, Electric, Hybrid
  bodyType    String   @default("Sedan")  // Sedan, SUV, Hatchback, Coupe, etc.
  engineSize  String   @default("2.0L")   // e.g., "2.0L", "1500cc"
  color       String   @default("White")  // Vehicle color
  transmission String  @default("Automatic") // Manual, Automatic, CVT
  condition   String   @default("Used")   // New, Used, Certified Pre-owned
  imageUrl    String
  description String
  specs       Json     // include { airConditioner: true/false, ... }
  type        VehicleType // BUY_NOW, BIDDING, LIVE_AUCTION
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Bidding window for BIDDING type
  biddingStart DateTime?
  biddingEnd   DateTime?
  bids        Bid[]
  conversations Conversation[]
}

enum VehicleType {
  BUY_NOW
  BIDDING
}

model Bid {
  id         String   @id @default(cuid())
  amount     Int
  createdAt  DateTime @default(now())
  bidderId   String
  bidder     User     @relation(fields: [bidderId], references: [id])
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
}

model Conversation {
  id          String   @id @default(cuid())
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  buyerId     String
  buyer       User     @relation(fields: [buyerId], references: [id])
  sellerId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    Message[]
  isActive    Boolean  @default(true)
  
  @@unique([vehicleId, buyerId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiverId     String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
}
